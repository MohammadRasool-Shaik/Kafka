/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.rash.avro.dto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Employee extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3726515802025079381L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Employee\",\"namespace\":\"org.rash.avro.dto\",\"fields\":[{\"name\":\"eid\",\"type\":\"int\"},{\"name\":\"name\",\"type\":[\"string\",\"null\"]},{\"name\":\"salary\",\"type\":[\"double\",\"null\"]},{\"name\":\"age\",\"type\":\"int\"},{\"name\":\"gender\",\"type\":[\"string\",\"null\"],\"default\":\"None\"},{\"name\":\"designation\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int eid;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.Double salary;
  @Deprecated public int age;
  @Deprecated public java.lang.CharSequence gender;
  @Deprecated public java.lang.CharSequence designation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Employee() {}

  /**
   * All-args constructor.
   */
  public Employee(java.lang.Integer eid, java.lang.CharSequence name, java.lang.Double salary, java.lang.Integer age, java.lang.CharSequence gender, java.lang.CharSequence designation) {
    this.eid = eid;
    this.name = name;
    this.salary = salary;
    this.age = age;
    this.gender = gender;
    this.designation = designation;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eid;
    case 1: return name;
    case 2: return salary;
    case 3: return age;
    case 4: return gender;
    case 5: return designation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eid = (java.lang.Integer)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: salary = (java.lang.Double)value$; break;
    case 3: age = (java.lang.Integer)value$; break;
    case 4: gender = (java.lang.CharSequence)value$; break;
    case 5: designation = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eid' field.
   */
  public java.lang.Integer getEid() {
    return eid;
  }

  /**
   * Sets the value of the 'eid' field.
   * @param value the value to set.
   */
  public void setEid(java.lang.Integer value) {
    this.eid = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'salary' field.
   */
  public java.lang.Double getSalary() {
    return salary;
  }

  /**
   * Sets the value of the 'salary' field.
   * @param value the value to set.
   */
  public void setSalary(java.lang.Double value) {
    this.salary = value;
  }

  /**
   * Gets the value of the 'age' field.
   */
  public java.lang.Integer getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.Integer value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'gender' field.
   */
  public java.lang.CharSequence getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.CharSequence value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'designation' field.
   */
  public java.lang.CharSequence getDesignation() {
    return designation;
  }

  /**
   * Sets the value of the 'designation' field.
   * @param value the value to set.
   */
  public void setDesignation(java.lang.CharSequence value) {
    this.designation = value;
  }

  /**
   * Creates a new Employee RecordBuilder.
   * @return A new Employee RecordBuilder
   */
  public static org.rash.avro.dto.Employee.Builder newBuilder() {
    return new org.rash.avro.dto.Employee.Builder();
  }
  
  /**
   * Creates a new Employee RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Employee RecordBuilder
   */
  public static org.rash.avro.dto.Employee.Builder newBuilder(org.rash.avro.dto.Employee.Builder other) {
    return new org.rash.avro.dto.Employee.Builder(other);
  }
  
  /**
   * Creates a new Employee RecordBuilder by copying an existing Employee instance.
   * @param other The existing instance to copy.
   * @return A new Employee RecordBuilder
   */
  public static org.rash.avro.dto.Employee.Builder newBuilder(org.rash.avro.dto.Employee other) {
    return new org.rash.avro.dto.Employee.Builder(other);
  }
  
  /**
   * RecordBuilder for Employee instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Employee>
    implements org.apache.avro.data.RecordBuilder<Employee> {

    private int eid;
    private java.lang.CharSequence name;
    private java.lang.Double salary;
    private int age;
    private java.lang.CharSequence gender;
    private java.lang.CharSequence designation;

    /** Creates a new Builder */
    private Builder() {
      super(org.rash.avro.dto.Employee.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.rash.avro.dto.Employee.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eid)) {
        this.eid = data().deepCopy(fields()[0].schema(), other.eid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.salary)) {
        this.salary = data().deepCopy(fields()[2].schema(), other.salary);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gender)) {
        this.gender = data().deepCopy(fields()[4].schema(), other.gender);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.designation)) {
        this.designation = data().deepCopy(fields()[5].schema(), other.designation);
        fieldSetFlags()[5] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing Employee instance
     * @param other The existing instance to copy.
     */
    private Builder(org.rash.avro.dto.Employee other) {
            super(org.rash.avro.dto.Employee.SCHEMA$);
      if (isValidValue(fields()[0], other.eid)) {
        this.eid = data().deepCopy(fields()[0].schema(), other.eid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.salary)) {
        this.salary = data().deepCopy(fields()[2].schema(), other.salary);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gender)) {
        this.gender = data().deepCopy(fields()[4].schema(), other.gender);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.designation)) {
        this.designation = data().deepCopy(fields()[5].schema(), other.designation);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'eid' field.
      * @return The value.
      */
    public java.lang.Integer getEid() {
      return eid;
    }

    /**
      * Sets the value of the 'eid' field.
      * @param value The value of 'eid'.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder setEid(int value) {
      validate(fields()[0], value);
      this.eid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'eid' field has been set.
      * @return True if the 'eid' field has been set, false otherwise.
      */
    public boolean hasEid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eid' field.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder clearEid() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'salary' field.
      * @return The value.
      */
    public java.lang.Double getSalary() {
      return salary;
    }

    /**
      * Sets the value of the 'salary' field.
      * @param value The value of 'salary'.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder setSalary(java.lang.Double value) {
      validate(fields()[2], value);
      this.salary = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'salary' field has been set.
      * @return True if the 'salary' field has been set, false otherwise.
      */
    public boolean hasSalary() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'salary' field.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder clearSalary() {
      salary = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public java.lang.Integer getAge() {
      return age;
    }

    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder setAge(int value) {
      validate(fields()[3], value);
      this.age = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder clearAge() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public java.lang.CharSequence getGender() {
      return gender;
    }

    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder setGender(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.gender = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder clearGender() {
      gender = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'designation' field.
      * @return The value.
      */
    public java.lang.CharSequence getDesignation() {
      return designation;
    }

    /**
      * Sets the value of the 'designation' field.
      * @param value The value of 'designation'.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder setDesignation(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.designation = value;
      fieldSetFlags()[5] = true;
      return this; 
    }

    /**
      * Checks whether the 'designation' field has been set.
      * @return True if the 'designation' field has been set, false otherwise.
      */
    public boolean hasDesignation() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'designation' field.
      * @return This builder.
      */
    public org.rash.avro.dto.Employee.Builder clearDesignation() {
      designation = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Employee build() {
      try {
        Employee record = new Employee();
        record.eid = fieldSetFlags()[0] ? this.eid : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.salary = fieldSetFlags()[2] ? this.salary : (java.lang.Double) defaultValue(fields()[2]);
        record.age = fieldSetFlags()[3] ? this.age : (java.lang.Integer) defaultValue(fields()[3]);
        record.gender = fieldSetFlags()[4] ? this.gender : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.designation = fieldSetFlags()[5] ? this.designation : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
