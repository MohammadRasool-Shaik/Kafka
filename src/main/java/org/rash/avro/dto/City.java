/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.rash.avro.dto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class City extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9109375630558354300L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"City\",\"namespace\":\"org.rash.avro.dto\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":[\"string\",\"null\"]},{\"name\":\"countryCode\",\"type\":[\"string\",\"null\"]},{\"name\":\"district\",\"type\":[\"string\",\"null\"]},{\"name\":\"population\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence countryCode;
  @Deprecated public java.lang.CharSequence district;
  @Deprecated public int population;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public City() {}

  /**
   * All-args constructor.
   */
  public City(java.lang.Integer id, java.lang.CharSequence name, java.lang.CharSequence countryCode, java.lang.CharSequence district, java.lang.Integer population) {
    this.id = id;
    this.name = name;
    this.countryCode = countryCode;
    this.district = district;
    this.population = population;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return countryCode;
    case 3: return district;
    case 4: return population;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: countryCode = (java.lang.CharSequence)value$; break;
    case 3: district = (java.lang.CharSequence)value$; break;
    case 4: population = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'countryCode' field.
   */
  public java.lang.CharSequence getCountryCode() {
    return countryCode;
  }

  /**
   * Sets the value of the 'countryCode' field.
   * @param value the value to set.
   */
  public void setCountryCode(java.lang.CharSequence value) {
    this.countryCode = value;
  }

  /**
   * Gets the value of the 'district' field.
   */
  public java.lang.CharSequence getDistrict() {
    return district;
  }

  /**
   * Sets the value of the 'district' field.
   * @param value the value to set.
   */
  public void setDistrict(java.lang.CharSequence value) {
    this.district = value;
  }

  /**
   * Gets the value of the 'population' field.
   */
  public java.lang.Integer getPopulation() {
    return population;
  }

  /**
   * Sets the value of the 'population' field.
   * @param value the value to set.
   */
  public void setPopulation(java.lang.Integer value) {
    this.population = value;
  }

  /**
   * Creates a new City RecordBuilder.
   * @return A new City RecordBuilder
   */
  public static org.rash.avro.dto.City.Builder newBuilder() {
    return new org.rash.avro.dto.City.Builder();
  }
  
  /**
   * Creates a new City RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new City RecordBuilder
   */
  public static org.rash.avro.dto.City.Builder newBuilder(org.rash.avro.dto.City.Builder other) {
    return new org.rash.avro.dto.City.Builder(other);
  }
  
  /**
   * Creates a new City RecordBuilder by copying an existing City instance.
   * @param other The existing instance to copy.
   * @return A new City RecordBuilder
   */
  public static org.rash.avro.dto.City.Builder newBuilder(org.rash.avro.dto.City other) {
    return new org.rash.avro.dto.City.Builder(other);
  }
  
  /**
   * RecordBuilder for City instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<City>
    implements org.apache.avro.data.RecordBuilder<City> {

    private int id;
    private java.lang.CharSequence name;
    private java.lang.CharSequence countryCode;
    private java.lang.CharSequence district;
    private int population;

    /** Creates a new Builder */
    private Builder() {
      super(org.rash.avro.dto.City.SCHEMA$);
    }
    
    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.rash.avro.dto.City.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[2].schema(), other.countryCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.district)) {
        this.district = data().deepCopy(fields()[3].schema(), other.district);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.population)) {
        this.population = data().deepCopy(fields()[4].schema(), other.population);
        fieldSetFlags()[4] = true;
      }
    }
    
    /**
     * Creates a Builder by copying an existing City instance
     * @param other The existing instance to copy.
     */
    private Builder(org.rash.avro.dto.City other) {
            super(org.rash.avro.dto.City.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[2].schema(), other.countryCode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.district)) {
        this.district = data().deepCopy(fields()[3].schema(), other.district);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.population)) {
        this.population = data().deepCopy(fields()[4].schema(), other.population);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Integer getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public org.rash.avro.dto.City.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public org.rash.avro.dto.City.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.rash.avro.dto.City.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.rash.avro.dto.City.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountryCode() {
      return countryCode;
    }

    /**
      * Sets the value of the 'countryCode' field.
      * @param value The value of 'countryCode'.
      * @return This builder.
      */
    public org.rash.avro.dto.City.Builder setCountryCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.countryCode = value;
      fieldSetFlags()[2] = true;
      return this; 
    }

    /**
      * Checks whether the 'countryCode' field has been set.
      * @return True if the 'countryCode' field has been set, false otherwise.
      */
    public boolean hasCountryCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'countryCode' field.
      * @return This builder.
      */
    public org.rash.avro.dto.City.Builder clearCountryCode() {
      countryCode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'district' field.
      * @return The value.
      */
    public java.lang.CharSequence getDistrict() {
      return district;
    }

    /**
      * Sets the value of the 'district' field.
      * @param value The value of 'district'.
      * @return This builder.
      */
    public org.rash.avro.dto.City.Builder setDistrict(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.district = value;
      fieldSetFlags()[3] = true;
      return this; 
    }

    /**
      * Checks whether the 'district' field has been set.
      * @return True if the 'district' field has been set, false otherwise.
      */
    public boolean hasDistrict() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'district' field.
      * @return This builder.
      */
    public org.rash.avro.dto.City.Builder clearDistrict() {
      district = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'population' field.
      * @return The value.
      */
    public java.lang.Integer getPopulation() {
      return population;
    }

    /**
      * Sets the value of the 'population' field.
      * @param value The value of 'population'.
      * @return This builder.
      */
    public org.rash.avro.dto.City.Builder setPopulation(int value) {
      validate(fields()[4], value);
      this.population = value;
      fieldSetFlags()[4] = true;
      return this; 
    }

    /**
      * Checks whether the 'population' field has been set.
      * @return True if the 'population' field has been set, false otherwise.
      */
    public boolean hasPopulation() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'population' field.
      * @return This builder.
      */
    public org.rash.avro.dto.City.Builder clearPopulation() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public City build() {
      try {
        City record = new City();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.countryCode = fieldSetFlags()[2] ? this.countryCode : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.district = fieldSetFlags()[3] ? this.district : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.population = fieldSetFlags()[4] ? this.population : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);  

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);  

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
  }

}
